apply plugin: 'java'
apply plugin: 'groovy'

sourceCompatibility = JavaVersion.VERSION_1_8

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.1'
    }
}

repositories {
    jcenter()
}

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs 'src/main/java' }
    }
    test {
        java { srcDirs = [] }
        groovy { srcDirs 'src/test/java' }
    }
}

dependencies {
    testCompile "junit:junit:4.11"
    testCompile "org.testng:testng:6.1.1"
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    compile "args4j:args4j:2.0.21"
    compile "org.codehaus.groovy:groovy-all:2.3.7"
}
apply plugin: 'info.solidsoft.pitest'

pitest {
    targetClasses = ["ru.gvsmirnov.sample*"]
    timestampedReports = false
}

task spock(type: Test) {
    useJUnit()
}

task testNg(type: Test) {
    useTestNG()
}

test {
    useJUnit()
}

test.dependsOn([spock, testNg])

task cleanGenerated(type: Delete) {
    description 'Cleans generated files'
    delete 'src/main/java/ru/gvsmirnov/sample/generated'
    delete 'src/test/java/ru/gvsmirnov/sample/generated'
}

task generate(type: JavaExec, dependsOn: [classes, cleanGenerated]) {
    description 'Generates the standard sample classes'
    main 'ru.gvsmirnov.sample.generator.LargeClassGenerator'
    classpath sourceSets.main.runtimeClasspath

    if (project.hasProperty('genArgs')) {
        args genArgs.split(" ")
    }
}

task(decompileClasses) << {
    def decompiledClasses = 0
    fileTree(sourceSets.main.output.classesDir).each { classFile ->
        def targetFile = new File(classFile.absolutePath.
                replace("classes", "decompiled").
                replace(".class", ".decompiled"))

        targetFile.parentFile.mkdirs()
        targetFile.write(decompile(classFile))
        decompiledClasses++
    }
    println("Decompiled $decompiledClasses successfully")
}

decompileClasses.dependsOn(classes)

def decompile(path) {
    def rawText = "javap -c -p $path".execute().text

    stripCodes(rawText)
}

def stripCodes(String decompiled) {
    decompiled.replaceAll("[ ]+\\d+:", " " * 5);
}
